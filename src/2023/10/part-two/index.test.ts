import {
  convertNests,
  convertMapToGrid,
  countNestsInLoop,
  findNextPositions,
  findStartPosition,
} from ".";
import { getRouteGrid } from "../part-one";

const samplePipeMap = `..........
.S------7.
.|F----7|.
.||....||.
.||....||.
.|L-7F-J|.
.|..||..|.
.L--JL--J.
..........`;

const sampleGridMap = [
  ["D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
  ["D", ".", ".", "D", ".", ".", ".", "D", ".", ".", ".", "D", ".", ".", "D"],
  ["D", ".", "F", "-", "-", "-", "-", "-", "-", "-", "-", "-", "7", ".", "D"],
  ["D", "D", "|", "D", "D", "D", "D", "D", "D", "D", "D", "D", "|", "D", "D"],
  ["D", ".", "|", "D", "F", "-", "-", "-", "-", "-", "7", "D", "|", ".", "D"],
  ["D", ".", "|", "D", "|", ".", ".", "D", ".", ".", "|", "D", "|", ".", "D"],
  ["D", ".", "|", "D", "|", ".", ".", "D", ".", ".", "|", "D", "|", ".", "D"],
  ["D", ".", "|", "D", "L", "-", "7", "D", "F", "-", "J", "D", "|", ".", "D"],
  ["D", ".", "|", "D", ".", ".", "|", "D", "|", ".", ".", "D", "|", ".", "D"],
  ["D", ".", "L", "-", "-", "-", "J", "D", "L", "-", "-", "-", "J", ".", "D"],
  ["D", ".", ".", "D", ".", ".", ".", "D", ".", ".", ".", "D", ".", ".", "D"],
  ["D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
];

test("現在の位置から同じ場所を通らずに進み続けてループの一覧を返す", () => {
  const actual = convertNests({ x: 1, y: 1 }, sampleGridMap);
  console.log(JSON.stringify(actual));
  expect(actual).toEqual([
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2],
    [2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2],
    [2, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 2, 2],
    [2, 2, 1, 0, 1, 2, 2, 2, 2, 2, 1, 0, 1, 2, 2],
    [2, 2, 1, 0, 1, 2, 2, 2, 2, 2, 1, 0, 1, 2, 2],
    [2, 2, 1, 0, 1, 1, 1, 2, 1, 1, 1, 0, 1, 2, 2],
    [2, 2, 1, 0, -1, -1, 1, 2, 1, -1, -1, 0, 1, 2, 2],
    [2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  ]);
});

test("現在の位置から記号に合わせて進むことのできる位置情報を返却する", () => {
  const actual = findNextPositions({ x: 1, y: 2 }, sampleGridMap);
  expect(actual).toEqual([
    { x: 1, y: 1 },
    { x: 1, y: 3 },
    { x: 0, y: 2 },
  ]);
});

test("地図をgridに変換してその外側に地面を追加する", () => {
  const actual = convertMapToGrid(samplePipeMap);
  expect(actual).toEqual([
    ["D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
    ["D", ".", ".", "D", ".", ".", ".", "D", ".", ".", ".", "D", ".", ".", "D"],
    ["D", ".", "F", "-", "-", "-", "-", "-", "-", "-", "-", "-", "7", ".", "D"],
    ["D", "D", "|", "D", "D", "D", "D", "D", "D", "D", "D", "D", "|", "D", "D"],
    ["D", ".", "|", "D", "F", "-", "-", "-", "-", "-", "7", "D", "|", ".", "D"],
    ["D", ".", "|", "D", "|", ".", ".", "D", ".", ".", "|", "D", "|", ".", "D"],
    ["D", ".", "|", "D", "|", ".", ".", "D", ".", ".", "|", "D", "|", ".", "D"],
    ["D", ".", "|", "D", "L", "-", "7", "D", "F", "-", "J", "D", "|", ".", "D"],
    ["D", ".", "|", "D", ".", ".", "|", "D", "|", ".", ".", "D", "|", ".", "D"],
    ["D", ".", "L", "-", "-", "-", "J", "D", "L", "-", "-", "-", "J", ".", "D"],
    ["D", ".", ".", "D", ".", ".", ".", "D", ".", ".", ".", "D", ".", ".", "D"],
    ["D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"],
  ]);
});

test("一番最初に外側のタイルキューを取得する", () => {
  const actual = findStartPosition(sampleGridMap);
  expect(actual).toEqual({ x: 0, y: 0 });
});

test("ループの内側の巣の数をカウントする", () => {
  const actual = countNestsInLoop(samplePipeMap);
  expect(actual).toBe(4);
});

test("ルートのグリッドを取得する", () => {
  const actual = getRouteGrid(samplePipeMap);
  expect(actual).toEqual([
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, 0, 1, 2, 3, 4, 5, 6, 7, -1],
    [-1, 1, 16, 17, 18, 19, 20, 21, 8, -1],
    [-1, 2, 15, -1, -1, -1, -1, 22, 9, -1],
    [-1, 3, 14, -1, -1, -1, -1, 21, 10, -1],
    [-1, 4, 13, 12, 11, 18, 19, 20, 11, -1],
    [-1, 5, -1, -1, 10, 17, -1, -1, 12, -1],
    [-1, 6, 7, 8, 9, 16, 15, 14, 13, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  ]);
});
